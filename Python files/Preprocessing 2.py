
import pandas as pd
import numpy as np
import logging


df=pd.read_csv("train_test_df")

logging.basicConfig(
    filename='logging_preprocessing_file2.txt',
    level=logging.DEBUG,
    format='%(asctime)s.%(msecs)03d %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    filemode="a"
    )


def feature_having_one_value(df):
    column_name=[]
    for i in df.columns:
        if df[i].nunique()==1:
            column_name.append(i)
    return column_name


### Features having one value, does not give any information to our model as its is same for every entry so let's drop it.
features=feature_having_one_value(df)
df=df.drop(features,axis=1)
logging.info("Features having one value has been deleted")
df["device.isMobile"]=df["device.isMobile"].apply(lambda x:0 if (x==False) else 1)



# There are some keyword in the data which is not useful for model bulding so let's replace it by none value.
lst=['(none)','(not set)','(not provided)','not available in demo dataset','unknown.unknown','/','not set']
for word in lst:
    df.replace(word,np.nan,inplace=True)
    
logging.info("unusable keywords from different features has been replaced by none value")



# Columns "totals.transaction" and "totals.transactionRevenue" is our target column which has lots of null values. 
# I am filling these values  by 0 means that there is no transaction of that particular user on that day and no revenue generated by the customer. 


df["totals.transactionRevenue"]=df["totals.transactionRevenue"].fillna(0)
df["totals.transactions"]=df["totals.transactions"].fillna(0)
logging.info("target column with null values replaced by 0")


def clean_trafficSource_source_col(col_string):
    try:
        if "google" in col_string:
            return "google"
        elif "yahoo" in col_string:
            return "yahoo"
        elif "reddit" in col_string:
            return "reddit"
        elif "youtube" in col_string:
            return "youtube"
        elif "facebook" in col_string:
            return "facebook"
        elif "pinterest" in col_string:
            return "pinterest"
        elif "baidu" in col_string:
            return "baidu"
        elif "aol" in col_string:
            return "aol"
        elif "quora" in col_string:
            return "quora"
        elif "bing" in col_string:
            return "bing"
        elif "wow" in col_string:
            return "wow"
        elif "blackboard" in col_string:
            return "blackboard"
        elif "github" in col_string:
            return "github"
        elif "clien.net" in col_string:
            return "clien.net"
        elif "sm.cn" in col_string:
            return "sm.cn"
        elif "msn" in col_string:
            return "msn"
        elif "mysearch" in col_string:
            return "mysearch.com"
        elif "amazon" in col_string:
            return "amazon"
        elif len(col_string)>20:
            return 'Other'
        else:
            return col_string
    except:
        return col_string
    
    
df["trafficSource.source"]=df["trafficSource.source"].apply(clean_trafficSource_source_col)
logging.info("source feature has been cleaned")


df.to_csv("Preprocessed_file1",index=False)

